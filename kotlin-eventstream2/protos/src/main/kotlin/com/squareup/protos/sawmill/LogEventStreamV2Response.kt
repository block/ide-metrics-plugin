// Code generated by Wire protocol buffer compiler, do not edit.
// Source: redacted.
@file:Suppress(
  "DEPRECATION",
  "RUNTIME_ANNOTATION_NOT_SUPPORTED",
)

package com.squareup.protos.sawmill

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import okio.ByteString

public class LogEventStreamV2Response(
  /**
   * total number of messages successfully published
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    schemaIndex = 0,
  )
  public val success_count: Int? = null,
  /**
   * total number of messages that failed to be published
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    schemaIndex = 1,
  )
  public val failure_count: Int? = null,
  /**
   * subset number of failed messages that were not published because they are either malformed or
   * don't conform to a catalog schema
   */
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#INT32",
    schemaIndex = 2,
  )
  public val invalid_count: Int? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<LogEventStreamV2Response, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is LogEventStreamV2Response) return false
    if (unknownFields != other.unknownFields) return false
    if (success_count != other.success_count) return false
    if (failure_count != other.failure_count) return false
    if (invalid_count != other.invalid_count) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (success_count?.hashCode() ?: 0)
      result = result * 37 + (failure_count?.hashCode() ?: 0)
      result = result * 37 + (invalid_count?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (success_count != null) result += """success_count=$success_count"""
    if (failure_count != null) result += """failure_count=$failure_count"""
    if (invalid_count != null) result += """invalid_count=$invalid_count"""
    return result.joinToString(prefix = "LogEventStreamV2Response{", separator = ", ", postfix = "}")
  }

  public fun copy(
    success_count: Int? = this.success_count,
    failure_count: Int? = this.failure_count,
    invalid_count: Int? = this.invalid_count,
    unknownFields: ByteString = this.unknownFields,
  ): LogEventStreamV2Response = LogEventStreamV2Response(success_count, failure_count, invalid_count, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<LogEventStreamV2Response> =
        object : ProtoAdapter<LogEventStreamV2Response>(
      FieldEncoding.LENGTH_DELIMITED, 
      LogEventStreamV2Response::class, 
      "type.googleapis.com/squareup.sawmill.LogEventStreamV2Response", 
      PROTO_2, 
      null, 
      "squareup/sawmill/service.proto"
    ) {
      override fun encodedSize(`value`: LogEventStreamV2Response): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.INT32.encodedSizeWithTag(1, value.success_count)
        size += ProtoAdapter.INT32.encodedSizeWithTag(2, value.failure_count)
        size += ProtoAdapter.INT32.encodedSizeWithTag(3, value.invalid_count)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: LogEventStreamV2Response) {
        ProtoAdapter.INT32.encodeWithTag(writer, 1, value.success_count)
        ProtoAdapter.INT32.encodeWithTag(writer, 2, value.failure_count)
        ProtoAdapter.INT32.encodeWithTag(writer, 3, value.invalid_count)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: LogEventStreamV2Response) {
        writer.writeBytes(value.unknownFields)
        ProtoAdapter.INT32.encodeWithTag(writer, 3, value.invalid_count)
        ProtoAdapter.INT32.encodeWithTag(writer, 2, value.failure_count)
        ProtoAdapter.INT32.encodeWithTag(writer, 1, value.success_count)
      }

      override fun decode(reader: ProtoReader): LogEventStreamV2Response {
        var success_count: Int? = null
        var failure_count: Int? = null
        var invalid_count: Int? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> success_count = ProtoAdapter.INT32.decode(reader)
            2 -> failure_count = ProtoAdapter.INT32.decode(reader)
            3 -> invalid_count = ProtoAdapter.INT32.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return LogEventStreamV2Response(
          success_count = success_count,
          failure_count = failure_count,
          invalid_count = invalid_count,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: LogEventStreamV2Response): LogEventStreamV2Response = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
