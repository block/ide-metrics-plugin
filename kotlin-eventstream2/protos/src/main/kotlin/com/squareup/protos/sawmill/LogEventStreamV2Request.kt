// Code generated by Wire protocol buffer compiler, do not edit.
// Source: redacted.
@file:Suppress(
  "DEPRECATION",
  "RUNTIME_ANNOTATION_NOT_SUPPORTED",
)

package com.squareup.protos.sawmill

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.redactElements
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List
import okio.ByteString

public class LogEventStreamV2Request(
  events: List<EventstreamV2Event> = emptyList(),
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#BOOL",
    schemaIndex = 1,
  )
  public val sync: Boolean? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<LogEventStreamV2Request, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.protos.sawmill.EventstreamV2Event#ADAPTER",
    label = WireField.Label.REPEATED,
    schemaIndex = 0,
  )
  public val events: List<EventstreamV2Event> = immutableCopyOf("events", events)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is LogEventStreamV2Request) return false
    if (unknownFields != other.unknownFields) return false
    if (events != other.events) return false
    if (sync != other.sync) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + events.hashCode()
      result = result * 37 + (sync?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (events.isNotEmpty()) result += """events=$events"""
    if (sync != null) result += """sync=$sync"""
    return result.joinToString(prefix = "LogEventStreamV2Request{", separator = ", ", postfix = "}")
  }

  public fun copy(
    events: List<EventstreamV2Event> = this.events,
    sync: Boolean? = this.sync,
    unknownFields: ByteString = this.unknownFields,
  ): LogEventStreamV2Request = LogEventStreamV2Request(events, sync, unknownFields)

  public companion object {
    public const val DEFAULT_SYNC: Boolean = false

    @JvmField
    public val ADAPTER: ProtoAdapter<LogEventStreamV2Request> =
        object : ProtoAdapter<LogEventStreamV2Request>(
      FieldEncoding.LENGTH_DELIMITED, 
      LogEventStreamV2Request::class, 
      "type.googleapis.com/squareup.sawmill.LogEventStreamV2Request", 
      PROTO_2, 
      null, 
      "squareup/sawmill/service.proto"
    ) {
      override fun encodedSize(`value`: LogEventStreamV2Request): Int {
        var size = value.unknownFields.size
        size += EventstreamV2Event.ADAPTER.asRepeated().encodedSizeWithTag(1, value.events)
        size += ProtoAdapter.BOOL.encodedSizeWithTag(2, value.sync)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: LogEventStreamV2Request) {
        EventstreamV2Event.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.events)
        ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.sync)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: LogEventStreamV2Request) {
        writer.writeBytes(value.unknownFields)
        ProtoAdapter.BOOL.encodeWithTag(writer, 2, value.sync)
        EventstreamV2Event.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.events)
      }

      override fun decode(reader: ProtoReader): LogEventStreamV2Request {
        val events = mutableListOf<EventstreamV2Event>()
        var sync: Boolean? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> events.add(EventstreamV2Event.ADAPTER.decode(reader))
            2 -> sync = ProtoAdapter.BOOL.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return LogEventStreamV2Request(
          events = events,
          sync = sync,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: LogEventStreamV2Request): LogEventStreamV2Request = value.copy(
        events = value.events.redactElements(EventstreamV2Event.ADAPTER),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }
}
